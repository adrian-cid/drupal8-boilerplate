<?php

/**
 * @file
 * Blank custom module.
 *
 * Created by: Topsitemakers
 * http://www.topsitemakers.com/
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Block\BlockPluginInterface;

/**
 * Constants.
 */
define('BOILERPLATE_SAMPLE_CONSTANT', 'sample value');

// Load the helper functions.
require_once dirname(__FILE__) . '/boilerplate.helpers.inc';

/**
 * Implements hook_help().
 */
function boilerplate_help_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'boilerplate.page':
      $build = [
        '#prefix' => '<p>',
        '#markup' => t('This is the help text for our sample page.'),
        '#suffix' => '</p>',
      ];

      return $build;
  }
}

/**
 * Implements hook_cron().
 */
function boilerplate_cron() {
  // Check if previous execution was completed.
  $lock = \Drupal::lock();
  if ($lock->acquire('boilerplate_cron')) {
    // Log a message. This is just to show that the example works.
    \Drupal::logger('boilerplate_cron')->notice('Custom cron implementation executed.');
    // Release the lock, so the next time our code can run.
    $lock->release('boilerplate_cron');
  }
}

/**
 * Implements hook_block_view_alter().
 */
function boilerplate_block_view_alter(array &$build, BlockPluginInterface $block) {
  // Here you can alter any block in the system.
}

/**
 * Implements hook_preprocess_node().
 */
function boilerplate_preprocess_node(&$variables) {
  // Alter variables passed to node templates.
  switch ($variables['node']->getType()) {
    case 'page':
      $variables['boilerplate'] = REQUEST_TIME;
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function hook_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'target_form_id':
      // Perform any form modifications here.
      break;
  }
}

/**
 * Implements hook_requirements().
 */
function boilerplate_requirements($phase) {
  $requirements = [];

  switch ($phase) {
    // Called while the module is installed.
    case 'install':
      break;

    // Called while the update.php is being executed.
    case 'update':
      break;

    // Called during regular use of the website.
    case 'runtime':
      // Let's check if the name of this module is still "boilerplate".
      // If it is, that means that it was not customized and the developers
      // should consider renaming it.
      $module_name = basename(__FILE__, '.module');
      // A little trick that will prevent the string from being replaced. We'll
      // compare the module name to the base64 encoding of "boilerplate". If we
      // don't do this, the error will always be displayed because the string we
      // will be checking this against will be the current name of the module.
      if ($module_name == base64_decode('Ym9pbGVycGxhdGU=')) {
        $requirements[] = [
          'title' => t('Dev module name'),
          'value' => $module_name,
          'description' => t('Module name was not changed. Consider renaming the module. This is coming from the hook_requirements() implementation in %module file.', [
            '%module' => drupal_get_path('module', $module_name) . '/' . $module_name . '.module',
          ]),
          'severity' => REQUIREMENT_WARNING,
        ];
      }
      else {
        $requirements[] = [
          'title' => t('Dev module name'),
          'value' => $module_name,
          'description' => t('You have changed the name of custom module. Everything is OK. This is coming from the hook_requirements() implementation in %module file.', [
            '%module' => drupal_get_path('module', $module_name) . '/' . $module_name . '.module',
          ]),
          'severity' => REQUIREMENT_OK,
        ];
      }
      break;
  }

  return $requirements;
}

/**
 * Implements hook_theme().
 */
function boilerplate_theme() {
  return [
    'boilerplate' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for our boilerplate template.
 */
function template_preprocess_boilerplate(&$variables) {
  $variables['account'] = \Drupal::currentUser();
}
